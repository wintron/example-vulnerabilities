{
  "test": {
    "id": "00000000-0000-0000-0000-000000000000",
    "attrs": {
      "subject": {},
      "subjectLocators": null,
      "orgId": "00000000-0000-0000-0000-000000000000",
      "groupId": null,
      "tenantId": null,
      "jobId": "00000000-0000-0000-0000-000000000000",
      "interactionId": "urn:snyk:interaction:08b36e96-430d-4afe-b626-27944d872111",
      "createdAt": "2025-10-28T16:32:06.416881-05:00",
      "updatedAt": "2025-10-28T16:32:06.416882-05:00",
      "jobState": "FINISHED",
      "errors": null,
      "warnings": null,
      "outcome": null,
      "outcomeReason": null,
      "failingLocalPolicy": false,
      "config": null,
      "source": "OTHER"
    }
  },
  "findings": [
    {
      "id": "d67b88af-e232-4150-a020-ae8578831604",
      "attrs": {
        "projectKey": "UNDEFINED-4ba39bd0-aebd-428e-95ac-cb6e68efe9a0",
        "assetKey": "90c0f8e1-6dd9-48cf-8471-278dcfdb6b7a",
        "title": "Code Injection",
        "description": "## Details\n\nA secure code injection attack occurs when the attacker exploits an existing input processing vulnerability, passing special characters and code directly to a web-based application or site. The code is then executed, potentially granting the user system access to export sensitive data, to install malware, or even to move laterally and to exploit other systems in the trusted internal network environment. While code injection attacks can take place in several ways, the common factor is allowing the user to submit executable code to the application. The most common forms of code injection are SQL injection (server side) and cross-site scripting (XSS) (client side).\n\n## Best practices for prevention\n- Never trust user input. Assume any input may transmit harmful values.\n- Apply least privilege principle (for example, limit users to read only wherever possible).\n- Avoid passing raw user input directly to functions; use parameterized queries to extract data first.\n- Sanitize user input strings of special characters such as ?, \u0026, /, \u003c, \u003e, and quotation marks.\n- Use whitelisting of known good values.\n- Validate user input against expected response types.\n- Escape shell commands with functions such as shlex for Python, or escapeshellarg for PHP.\n- Remember that code injection can take place on multiple fronts: GET and POST requests, but also cookies and HTTP headers.\n- Ensure up-to-date patching across all systems to remediate known vulnerabilities so these cannot be exploited by code injection.\n- Educate all team members on safe data handling procedures to prevent attacks.",
        "type": "SAST",
        "tool": "SnykCode",
        "policyModifications": null,
        "evidence": [
          {}
        ],
        "locations": [
          {}
        ],
        "createdAt": "2025-10-28T16:32:06.416986-05:00",
        "updatedAt": "2025-10-28T16:32:06.416986-05:00",
        "test": {
          "id": "00000000-0000-0000-0000-000000000000",
          "attrs": null
        },
        "problems": null,
        "problemRefs": [
          {},
          {}
        ],
        "assetId": null,
        "projectId": null,
        "policyIds": null,
        "breachedLocalPolicyConfig": null,
        "breachedPolicyIds": null,
        "effectiveSeverity": "HIGH",
        "risk": {
          "id": "00000000-0000-0000-0000-000000000000",
          "attrs": null
        },
        "fix": null
      }
    },
    {
      "id": "d167c76b-c448-4de6-9460-d4fc6eb5a240",
      "attrs": {
        "projectKey": "UNDEFINED-936f8648-680e-4d51-93db-49128b33e4f7",
        "assetKey": "df1168fb-6113-435a-9feb-f24c9d10b0bc",
        "title": "Command Injection",
        "description": "## Details\n\nWith an OS command injection attack a web application user can pass commands directly to the system shell, attached to a legitimate request. These commands can then be executed on the application server, potentially leading to harmful consequences, including data exposure or deletion. Like code injection attacks, command injection attacks are essentially a failure of data validation. Unlike code injection attacks, which introduce new code, command injection attacks use existing system functions, often taking advantage of the application's unnecessarily high privilege level, increasing the risk of serious harm and reputational damage.\n\n## Best practices for prevention\n- Never trust user input. Assume any input may transmit harmful values.\n- Adopt the principle of least privilege: No application should have a greater access level than needed to run its required tasks.\n- Control user access policies on a task-by-task basis.\n- Don't pass user input directly to the system; use libraries or APIs that lack system access.\n- Where shell commands must be passed, escape values using functions like shlex for Python, or escapeshellarg() for PHP.\n- Sanitize user input with regular expressions to define permitted characters along with maximum string length.\n- Convert special characters such as `\u0026 |  ; $ \u003e \u003c \\ !` before passing to the server.\n- Whitelist permitted commands and validate user responses against these expectations.\n- Remember that code injection can take place on multiple fronts: GET and POST requests, but also cookies and HTTP headers.\n- Ensure up-to-date patching across all systems to remediate known vulnerabilities.\n- Educate all team members on safer data handling procedures to prevent attacks.",
        "type": "SAST",
        "tool": "SnykCode",
        "policyModifications": null,
        "evidence": [
          {}
        ],
        "locations": [
          {}
        ],
        "createdAt": "2025-10-28T16:32:06.417003-05:00",
        "updatedAt": "2025-10-28T16:32:06.417003-05:00",
        "test": {
          "id": "00000000-0000-0000-0000-000000000000",
          "attrs": null
        },
        "problems": null,
        "problemRefs": [
          {},
          {}
        ],
        "assetId": null,
        "projectId": null,
        "policyIds": null,
        "breachedLocalPolicyConfig": null,
        "breachedPolicyIds": null,
        "effectiveSeverity": "HIGH",
        "risk": {
          "id": "00000000-0000-0000-0000-000000000000",
          "attrs": null
        },
        "fix": null
      }
    },
    {
      "id": "611b04da-2db7-477e-bc06-fa1028b6a143",
      "attrs": {
        "projectKey": "UNDEFINED-dbae0cd9-6a44-4841-abd7-f33dffcdf30c",
        "assetKey": "5e7fe714-e8ce-43c8-91b9-7d57890e2844",
        "title": "Information Exposure - X-Powered-By Header",
        "description": "## Details\n\nSensitive data includes: personally identifiable information (PII) of employees, customers, users, or other third parties; financial information; code; intellectual property; or protected network information such as passwords. Exposure of sensitive information to an unauthorized actor occurs when any party who does not require this information for business purposes can remove this information from the secure network.\nConsequences of exposure can include holding it for ransom payment, identity theft, or access to other internal network resources-along with financial loss due to regulatory fines, court settlements, or cost to restore compromised systems. As most attackers aim to extract sensitive information, this CWE only describes exploits that take advantage of vulnerabilities related to how data is handled: the management, storage, transfer, or removal of sensitive information.\n\n## Best practices for prevention\n- Encrypt data at all times, whether in transit or at rest.\n- When transporting data, always use a secure protocol such as TLS.\n- Before collecting PII or financial information, consider whether there is a true business need for this information; similarly, before storing the data, ensure that there is an ongoing business need.\n- Classify all incoming data according to privacy and security guidelines to improve awareness of sensitive data.\n- Ensure that caching is disabled for all transactions involving sensitive information.\n- Store passwords with secure, salted hashing functions.\n- Apply a network-wide least-privilege policy so sensitive data is provided only to users with business need to know.",
        "type": "SAST",
        "tool": "SnykCode",
        "policyModifications": null,
        "evidence": [
          {}
        ],
        "locations": [
          {}
        ],
        "createdAt": "2025-10-28T16:32:06.417023-05:00",
        "updatedAt": "2025-10-28T16:32:06.417023-05:00",
        "test": {
          "id": "00000000-0000-0000-0000-000000000000",
          "attrs": null
        },
        "problems": null,
        "problemRefs": [
          {},
          {}
        ],
        "assetId": null,
        "projectId": null,
        "policyIds": null,
        "breachedLocalPolicyConfig": null,
        "breachedPolicyIds": null,
        "effectiveSeverity": "MEDIUM",
        "risk": {
          "id": "00000000-0000-0000-0000-000000000000",
          "attrs": null
        },
        "fix": null
      }
    },
    {
      "id": "d4fd7cc7-328f-42ad-bf45-00c8060cb8b8",
      "attrs": {
        "projectKey": "UNDEFINED-9683ffa3-7873-43dd-b2df-6eae9c90f05f",
        "assetKey": "6650951a-fe70-4fbb-b448-e8e20f7c7cf8",
        "title": "Allocation of Resources Without Limits or Throttling",
        "description": "\n## Details\n\nWithout unlimited resources, software operating in the real world is inherently limited in the resources it may consume; similarly, servers are limited by the number of simultaneous sessions they can handle. Therefore, it is important for developers to design software that considers these real-world physical (or virtual) limitations and limits user sessions accordingly, both in terms of the number of user sessions and in the quantity of resources each user may demand. Software with this weakness does not include such limitations and as a result, individual user sessions may consume too many resources, leading to unintended software behavior including, potentially, denial of service. This can be compared to a single restaurant customer emptying out the entire buffet, leaving no food for other customers--or an entire busload mobbing the buffet all at once, with a similar effect. This may happen inadvertently or as a result of an attack by a malicious user.\n\n## Best practices for prevention\n* Test extensively to obtain baseline values indicating how the software performs in the real world under various conditions (normal and peak); use these values to determine reasonable software limits.\n* Set clear limits for all flexible parameters such as maximum allocable memory, number of processes within a given timeframe, file descriptors, requests per client, number of records per request, etc. This is particularly true for any parameters within user control.\n* Release all resources when no longer in use, including incorporating timeouts for inactive users, processes, and resources.\n* Familiarize Dev, Ops, and IT teams with best practices for recognizing and preventing DoS attacks and out-of-control resource allocation to prevent catastrophic failures.",
        "type": "SAST",
        "tool": "SnykCode",
        "policyModifications": null,
        "evidence": [
          {}
        ],
        "locations": [
          {}
        ],
        "createdAt": "2025-10-28T16:32:06.41704-05:00",
        "updatedAt": "2025-10-28T16:32:06.41704-05:00",
        "test": {
          "id": "00000000-0000-0000-0000-000000000000",
          "attrs": null
        },
        "problems": null,
        "problemRefs": [
          {},
          {}
        ],
        "assetId": null,
        "projectId": null,
        "policyIds": null,
        "breachedLocalPolicyConfig": null,
        "breachedPolicyIds": null,
        "effectiveSeverity": "MEDIUM",
        "risk": {
          "id": "00000000-0000-0000-0000-000000000000",
          "attrs": null
        },
        "fix": null
      }
    }
  ]
}
